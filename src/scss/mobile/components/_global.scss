@import "../functions";
@import "colors";
@import "easings";
@import "mixins";

//
// Mobile Variables
//

// Data attribute namespace
// styles get applied to [data-mysite-plugin], etc
$namespace: false !default;

// The default font-size is set to 100% of the browser style sheet (usually 16px)
// for compatibility with browser-based text zoom or user-set defaults.

// Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// If you want your base font-size to be different and not have it affect the grid breakpoints,
// set $rem-base to $base-font-size and make sure $base-font-size is a px value.
$base-font-size: 100% !default;

// $base-line-height is 1.5 times of $base-font-size
$base-line-height: 1.5 !default;

// base background
$base-bg-color: $white !default;

// We use these to define default font stacks
$font-family-sans-serif: STXiHei, STHeiTi, Helvetica Neue, Helvetica, Droid Sans Fallback, Roboto, Arial, sans-serif !default;
$font-family-serif: Georgia, Cambria, Times New Roman, Times, serif !default;
$font-family-monospace: Consolas, Liberation Mono, Courier, monospace !default;

// We use these to define default font weights
$font-weight-normal: 400 !default;
$font-weight-bold: 700 !default;

// We use these to control various global styles
$body-bg: false !default;
$body-font-color: $jet !default;
$body-font-family: sans-serif !default;
$body-font-size-px: $rem-base * 0.75 !default;
$body-font-size-rem: to-rem($body-font-size-px) !default;
$body-font-size: to-em($body-font-size-px) !default;
$body-font-weight: $font-weight-normal !default;

// We use this to control font-smoothing
$font-smoothing: antialiased !default;

// We use these to make sure border radius matches unless we want it different.
$global-radius: to-rem(3) !default;
$global-rounded: 1000px !default;

// We use these to control inset shadow shiny edges and depressions.
$shiny-edge-size: 0 1px 0 !default;
$shiny-edge-color: rgba($white, 0.5) !default;
$shiny-edge-active-color: rgba($black, 0.2) !default;

// We use this to control whether or not CSS classes come through in the gem files.
$include-html-classes: true !default;
$include-js-meta-styles: true !default;

// Warning! Meta styles are a dependancy of the Javascript.
$include-html-global-classes: $include-html-classes !default;

// Media Query Ranges
$small-breakpoint: to-em(640) !default;
$medium-breakpoint: to-em(1024) !default;

// $large-breakpoint: to-em(1440) !default;
// $xlarge-breakpoint: to-em(1920) !default;

$small-range: 0, $small-breakpoint !default;
$medium-range: $small-breakpoint + to-em(1), $medium-breakpoint !default;

// $large-range: $medium-breakpoint + to-em(1), $large-breakpoint !default;
// $xlarge-range: $large-breakpoint + to-em(1), $xlarge-breakpoint !default;
// $xxlarge-range: $xlarge-breakpoint + to-em(1), to-em(99999999) !default;

$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;

// $large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
// $large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;

// $xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
// $xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;

// $xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
// $xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;

$retina: "#{$screen} and (min-resolution: 192dpi)", "#{$screen} and (min-resolution: 2dppx)" !default;
$retina3x: "#{$screen} and (min-resolution: 249dpi)", "#{$screen} and (min-resolution: 2.6dppx)" !default;

// Legacy
$small: $small-up !default;
$medium: $medium-up !default;

// $large: $large-up !default;

@include exports("global") {
    // Meta styles are a dependancy of the Javascript.
    // Used to provide media query values for javascript components.
    // Forward slash placed around everything to convince PhantomJS to read the value.
    @if $include-js-meta-styles {
        meta.mobile-mq-small {
            font-family: "/" + unquote($small-up) + "/";
            width: lower-bound($small-range);
        }
        meta.mobile-mq-small-only {
            font-family: "/" + unquote($small-only) + "/";
            width: lower-bound($small-range);
        }
        meta.mobile-mq-medium {
            font-family: "/" + unquote($medium-up) + "/";
            width: lower-bound($medium-range);
        }
        meta.mobile-mq-medium-only {
            font-family: "/" + unquote($medium-only) + "/";
            width: lower-bound($medium-range);
        }
        // meta.mobile-mq-large {
        //     font-family: "/" + unquote($large-up) + "/";
        //     width: lower-bound($large-range);
        // }
        // meta.mobile-mq-large-only {
        //     font-family: "/" + unquote($large-only) + "/";
        //     width: lower-bound($large-range);
        // }
        // meta.mobile-mq-xlarge {
        //     font-family: "/" + unquote($xlarge-up) + "/";
        //     width: lower-bound($xlarge-range);
        // }
        // meta.mobile-mq-xlarge-only {
        //     font-family: "/" + unquote($xlarge-only) + "/";
        //     width: lower-bound($xlarge-range);
        // }
        // meta.mobile-mq-xxlarge {
        //     font-family: "/" + unquote($xxlarge-up) + "/";
        //     width: lower-bound($xxlarge-range);
        // }
        meta.mobile-data-attribute-namespace {
            font-family: #{$namespace};
        }
    }
    @if $include-html-global-classes {
        /* Global */
        // Must be 100% for off canvas to work
        html,
        body {
            min-height: 100%;
            background-color: $base-bg-color;
            text-size-adjust: 100%;
        }
        html {
            font-size: $base-font-size;
            // @media #{$retina3x) {
            //   font-size: $base-font-size * 1.5;
            // }

        }
        // Set box-sizing globally to handle padding and border widths
        *,
        *::before,
        *::after {
            box-sizing: border-box;
        }
        // Default body styles
        body {
            @if $body-bg {
                background: $body-bg;
            }
            color: $body-font-color;
            font: $body-font-weight #{$body-font-size}/#{$base-line-height} $body-font-family;
            // Set to $base-line-height to take on browser default of 150%
            margin: 0;
            padding: 0;
            position: relative;
            // Make webkit browser scrolling smoothly
            -webkit-overflow-scrolling: touch;
            -webkit-tap-highlight-color: rgba($black, 0);
        }
        // Grid Defaults to get images and embeds to work properly
        img {
            max-width: 100%;
            height: auto;
        }
        // Font smoothing
        // Antialiased font smoothing works best for light text on a dark background.
        // Apply to single elements instead of globally to body.
        // Note this only applies to webkit-based desktop browsers and Firefox 25 (and later) on the Mac.
        // .antialiased { -webkit-font-smoothing: antialiased; }
        // Get rid of gap under images by making them display: inline-block; by default
        img {
            display: inline-block;
            vertical-align: middle;
        }
        //
        // Global resets for forms
        //
        // Make sure textarea takes on height automatically
        textarea {
            height: auto;
            min-height: 50px;
        }
        // Make select elements 100% width by default
        select {
            width: 100%;
        }

        // Miscellaneous useful HTML classes
        .left {
            float: left;
        }
        .right {
            float: right;
        }
        .clearfix {
            @include clearfix;
        }
        // Hide visually and from screen readers
        .hide {
            display: none !important;
        }
        // Hide visually and from screen readers, but maintain layout
        .invisible {
            opacity: 0;
            visibility: hidden;
        }
    }
}