@import "global";
@import "buttons";

//
// Button Group Variables
//
$include-html-buttons-classes: $include-html-classes !default;

$button-group-class: 'btn-group' !default;
// Sets the margin and border.
$button-bar-margin-right: to-rem(10) !default;
$button-group-border-width: 1px !default;
$button-group-border-style: solid !default;

//
// Button Group Mixins
//

// We use this to add styles for a button group container
@mixin button-group-container($styles: true, $float: false) {
    @if $styles {
        list-style: none;
        margin: 0;
        left: 0;
        @include clearfix;
    }
    @if $float {
        float: left;
        margin-right: $button-bar-margin-right;
        & div {
            overflow: hidden;
        }
    }
}

// We use this to control styles for button groups
@mixin button-group-style($radius: false, $even: false, $float: false, $orientation: horizontal) {
    // Make sure the first child doesn't get the negative margin.
    &:first-child {
        margin-left: 0;
    }
    > button,
    .#{$buttons-class} {
        border-left: $button-group-border-width $button-group-border-style rgba(255, 255, 255, 0.5);
    }
    &:first-child {
        button,
        .#{$buttons-class} {
            border-left: 0;
        }
    }
    $button-group-display: list-item;
    $button-group-margin: 0;
    // We use this to control the flow, or remove those styles completely.
    @if $float {
        $button-group-display: list-item;
        $button-group-margin: 0;
        float: $float;
    }
    @else {
        $button-group-display: inline-block;
        float: left;
        $button-group-margin: 0 -2px;
    }
    @if $orientation == vertical {
        $button-group-display: block;
        $button-group-margin: 0;
        > button,
        > .#{$buttons-class} {
            border-top: $button-group-border-width $button-group-border-style rgba(255, 255, 255, 0.5);
            border-left: 0;
            display: block;
            margin: 0;
        }
        > button {
            width: 100%;
        }
        &:first-child {
            button,
            .#{$buttons-class} {
                border-top: 0;
            }
        }
    }
    display: $button-group-display;
    margin: $button-group-margin;
    // We use these to control left and right radius on first/last buttons in the group.
    @if $radius {
        &,
        > button,
        > .#{$buttons-class} {
            border-radius: 0;
        }
        @if $radius == true {
            &:first-child,
            &:first-child > button,
            &:first-child > .#{$buttons-class} {
                @if $orientation == vertical {
                    @include side-radius(top, $buttons-radius);
                }
                @else {
                    @include side-radius(left, $buttons-radius);
                }
            }
            &:last-child,
            &:last-child > button,
            &:last-child > .#{$buttons-class} {
                @if $orientation == vertical {
                    @include side-radius(bottom, $buttons-radius);
                }
                @else {
                    @include side-radius(right, $buttons-radius);
                }
            }
        }
        @else if $radius != 0 {
            &:first-child,
            &:first-child > button,
            &:first-child > .#{$buttons-class} {
                @if $orientation == vertical {
                    @include side-radius(top, $radius);
                }
                @else {
                    @include side-radius(left, $radius);
                }
            }
            &:last-child,
            &:last-child > button,
            &:last-child > .#{$buttons-class} {
                @if $orientation == vertical {
                    @include side-radius(bottom, $radius);
                }
                @else {
                    @include side-radius(right, $radius);
                }
            }
        }
    }
    // We use this to make the buttons even width across their container
    @if $even {
        width: percentage(100 / $even / 100);
        button,
        .#{$buttons-class} {
            width: 100%;
        }
    }
}

@include exports("button-group") {
    @if $include-html-buttons-classes {
        /* Button groups */
        .#{$button-group-class} {
            @include button-group-container;
            > li {
                @include button-group-style($radius: $buttons-radius);
            }
            @for $i from 2 through 3 {
                &.even-#{$i} li {
                    @include button-group-style($even: $i, $float: null);
                }
            }
            // &.stack > li {
            //     @include button-group-style($radius: $buttons-radius, $orientation: vertical);
            //     float: none;
            // }
            &.flat > li {
                &,
                > button,
                > .#{$buttons-class} {
                    border-radius: 0;
                }
            }
            // &.flat.stack > * {
            //     @include button-group-style($radius: 0, $float: null, $orientation: vertical);
            // }
            &.round > li {
                &:first-child {
                    &,
                    > button,
                    > .#{$buttons-class} {
                        @include side-radius(left, $buttons-rounded);
                    }
                }
                &:last-child {
                    &,
                    > button,
                    > .#{$buttons-class} {
                        @include side-radius(right, $buttons-rounded);
                    }
                }
            }
            // &.round.stack > * {
            //     @include button-group-style($radius: $buttons-md, $float: null, $orientation: vertical);
            // }

        }
    }
}