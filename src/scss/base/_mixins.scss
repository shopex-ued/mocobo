//
// Global Mixins
//

// @mixins
//
// We use this to create equal side border radius on elements.
// $side - Options: left, right, top, bottom
@mixin side-radius($side, $radius: $global-radius) {
    @if $side == left or $side == right {
        border-bottom-#{$side}-radius: $radius;
        border-top-#{$side}-radius: $radius;
    }
    @else {
        border-#{$side}-left-radius: $radius;
        border-#{$side}-right-radius: $radius;
    }
}

// @mixins
//
// We use this to add single or multiple transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default: ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
// $delay - Default: null (0s)
@mixin transition($property: all, $speed: 300ms, $ease: $easeOut, $delay: null) {
    $transition: none;
    @if type-of($property) == list {
        @each $transition_list in $property {
            $_len: length($transition_list);
            $_property: null;
            $_speed: null;
            $_ease: null;
            $_delay: null;
            @for $i from 1 through $_len {
                @if $i == 1 {
                    $_property: nth($transition_list, $i);
                }
                @if $_len > 1 {
                    @if $i == 2 {
                        $_speed: nth($transition_list, $i);
                    }
                }
                @else {
                    $_speed: $speed;
                }
                @if $_len > 2 {
                    @if $i == 3 {
                        $_ease: nth($transition_list, $i);
                    }
                }
                @else {
                    $_ease: $ease;
                }
                @if $_len > 3 {
                    @if $i == 4 {
                        $_delay: nth($transition_list, $i);
                    }
                }
                @else {
                    $_delay: $delay;
                }
            }
            @if $transition == none {
                $transition: $_property $_speed $_ease $_delay;
            }
            @else {
                $transition: $transition, $_property $_speed $_ease $_delay;
            }
        }
    }
    @else {
        $transition: $property $speed $ease $delay;
    }
    transition: $transition;
}

// Gradients
@mixin linear-gradient($color-from, $color-to) {
    background-image: linear-gradient(to bottom, $color-from, $color-to);
}

// @mixins
//
// We use this to create isosceles triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
    content: "";
    display: block;
    height: 0;
    width: 0;
    border: $triangle-size solid transparent;
    border-#{$triangle-direction}-color: $triangle-color;
}

// @mixins
//
// We use this to absolutely centered element(s)
@mixin centered($position: absolute) {
    position: $position;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// @mixins
//
// We use this to controll text nowrap.
@mixin nowrap {
    max-width: 100%;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

// @mixins
//
// We use this to do clear floats
@mixin clearfix {
    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

// @mixins
//
// We use this to add a glowing effect to block elements
// $selector - Used for selector state. Default: focus, Options: hover, active, visited
// $fade-time - Default: 250ms
// $effect-color - Default: fade-out($primary-color, .25)
// $border-color - Default: true
@mixin block-glowing-effect($selector: focus, $fade-time: 250ms, $effect-color: fade-out($primary-color, 0.25), $border-color: true) {
    @include transition(box-shadow border-color, $fade-time, $easeInOut);
    &:#{$selector} {
        @if $border-color == true {
            border-color: $effect-color;
        }
        @else if $border-color {
            border-color: $border-color;
        }
        box-shadow: 0 0 5px $effect-color;
    }
}

// @mixins
//
// We use this to translate elements
// $horizontal: Default: 0
// $vertical: Default: 0
@mixin translate($horizontal: 0, $vertical: 0, $dimension: 3) {
    @if $dimension == 3 {
        transform: translate3d($horizontal, $vertical, 0);
    }
    @else {
        transform: translate2d($horizontal, $vertical);
    }
}

// @mixins
//
// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px;
    overflow: hidden;
    position: absolute !important;
    width: 1px;
}

// @mixins
//
// Turns off the element-invisible effect.
@mixin element-invisible-off {
    position: static !important;
    height: auto;
    width: auto;
    overflow: visible;
    clip: auto;
}

//@mixins
//
// Add ellipsis when text overflow.
@mixin ellipsis($width: false) {
    @if $width {
        width: $width;
    }
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin ellipsis-lines($lines: 2) {
    display: -webkit-box;
    word-wrap: break-word;
    white-space: normal;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    // flex-direction: column;
}

//@mixins
//
// Add top/bottom or left/right hairline.
@mixin hairline($type, $color, $start: 0, $end: true, $direct: horizontal) {
    @if $type == double or $type == top {
        &::before {
            content: "";
            position: absolute;
            background-color: $color;
            @if $direct == horizontal {
                left: $start;
                @if $end == true {
                    right: $start;
                }
                @else if $end != false {
                    right: $end;
                }
                top: -1px;
                height: 1px;
                transform: scaleY(0.5);
            }
            @else {
                left: 0;
                top: $start;
                @if $end == true {
                    bottom: $start;
                }
                @else if $end != false {
                    bottom: $end;
                }
                width: 1px;
                transform: scaleX(0.5);
            }
        }
    }
    @if $type != top {
        &::after {
            content: "";
            position: absolute;
            background-color: $color;
            @if $direct == horizontal {
                left: $start;
                @if $end == true {
                    right: $start;
                }
                @else if $end != false {
                    right: $end;
                }
                bottom: 0;
                height: 1px;
                transform: scaleY(0.5);
            }
            @else {
                right: 0;
                top: $start;
                @if $end == true {
                    bottom: $start;
                }
                @else if $end != false {
                    bottom: $end;
                }
                width: 1px;
                transform: scaleX(0.5);
            }
        }
    }
}

@mixin svg-hairline($direct, $color, $start: 0, $end: true) {
    &::before {
        content: '';
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        z-index: 0;
        @include thin-border($direct, $color, $start, $end);
    }
}

@mixin thin-border($direct: top, $color: null, $start: 0, $end: true) {
    @if $end == true {
        $end: $start;
    }
    $direction: (
        top: $start 0,
        bottom: $start 100%,
        left: 0 $start,
        right: 100% $start
    );
    $asize: calc(100% - #{$start} - #{$end});

    $image: null;
    $position: null;
    $size: null;

    @if type-of($direct) == string {
        @if $direct == all {
            $direct: top right bottom left;
        }
        @else {
            $image: url(thin-line($direct, $color));
            $position: map-get($direction, $direct);
            @if $direct == left or $direct == right {
                $size: auto $asize;
            }
            @else {
                $size: $asize;
            }
        }
    }

    @if type-of($direct) == list {
        $image: ();
        $position: ();
        $size: ();
        @each $v in $direct {
            $image: append($image, url(thin-line($v, $color)), comma);
            $position: append($position, map-get($direction, $v), comma);
            @if $v == left or $v == right {
                $size: append($size, auto $asize, comma);
            }
            @else {
                $size: append($size, $asize, comma);
            }
        }
    }
    background-repeat: no-repeat;
    background-image: $image;
    background-position: $position;
    background-size: $size;
}
