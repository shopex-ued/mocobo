// This is the default html and body font-size for the base rem value.
$rem-base: 16px !default;

// IMPORT ONCE:
// We use this to prevent styles from being loaded multiple times for components that rely on other components.
$modules: () !default;

@mixin exports($name) {
    // Import from global scope
    $modules: $modules !global;
    // Check if a module is already on the list
    $module_index: index($modules, $name);
    @if $module_index == null or $module_index == false {
        $modules: append($modules, $name) !global;
        @content;
    }
}

//
// @functions
//

// RANGES:
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range) {
    @if length($range) <= 0 {
        @return 0;
    }
    @return nth($range, 1);
}

@function upper-bound($range) {
    @if length($range) < 2 {
        @return 999999999999;
    }
    @return nth($range, 2);
}

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// TEXT INPUT TYPES

@function text-inputs($types: all, $selector: input) {
    $return: ();
    $all-text-input-types: text password date email number search tel url color textarea;
    @if $types == all {
        $types: $all-text-input-types;
    }
    @each $type in $types {
        @if $type == textarea {
            @if $selector == input {
                $return: append($return, unquote(#{$type}), comma);
            }
            @else {
                $return: append($return, unquote(#{$type}#{$selector}), comma);
            }
        }
        @else {
            $return: append($return, unquote('#{$selector}[type="#{$type}"]'), comma);
        }
    }
    @return $return;
}

// CONVERT TO REM
@function convert2rem($value, $base-value: $rem-base) {
    @if unitless($value / 1rem) {
        @return $value;
    }
    $value: strip-unit($value);
    $base-value: strip-unit($base-value);
    // Turn 0rem into 0
    @if $value == 0 {
        @return 0;
    }
    @if $base-value == 0 {
        @warn "$base-value should NOT BE 0";
    }
    @else {
        @return $value / $base-value * 1rem;
    }
}

@function data($attr) {
    @if $namespace {
        @return "[data-" + $namespace + "-" + $attr + "]";
    }
    @return "[data-" + $attr + "]";
}

// Convert px to rem
// Allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   to-rem(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   to-rem((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   to-rem(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   to-rem((16px, 32px, 48), 8px);

@function to-rem($value, $base-value: $rem-base) {
    $max: length($value);
    @if $max == 1 {
        @return convert2rem($value, $base-value);
    }
    $remValues: ();
    @for $i from 1 through $max {
        $remValues: append($remValues, convert2rem(nth($value, $i), $base-value));
    }
    @return $remValues
}

@function to-em($values, $base-value: $rem-base) {
    $remValues: to-rem($values, $base-value: $rem-base);
    $max: length($remValues);
    @if $max == 1 {
        @return strip-unit(nth($remValues, 1)) * 1em;
    }
    $emValues: ();
    @for $i from 1 through $max {
        $emValues: append($emValues, strip-unit(nth($remValues, $i)) * 1em);
    }
    @return $emValues;
}

@function thin-line($direct:null, $color:#000) {
    $svg: null;
    @if $direct == left {
        $svg: 'data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" width="1" height="100%"><rect fill="#{$color}" x="0" y="0" width="0.5" height="100%"/></svg>'
    }
    @else if $direct == right {
        $svg: 'data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" width="1" height="100%"><rect fill="#{$color}" x="0.5" y="0" width="0.5" height="100%"/></svg>'
    }
    @else if $direct == top {
        $svg: 'data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="1"><rect fill="#{$color}" x="0" y="0" width="100%" height="0.5"/></svg>'
    }
    @else if $direct == bottom {
        $svg: 'data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="1"><rect fill="#{$color}" x="0" y="0.5" width="100%" height="0.5"/></svg>'
    }
    @return $svg;
}
